# PlayerBalancer 配置文件 (原贴https://www.spigotmc.org/resources/10788/)
# 请注意阅读注释，有效的阅读注释能让你高效的配置本插件（而不是各种提问）
# 联系我们获取帮助： (https://bghddevelopment.com/discord) 或使用github "Issues"
# 当需要获取帮助时，可以使用/balancer paste指令快速生成帮助信息
# 若插件在加载配置文件时出现错误，请尝试将文本使用双引号包围

general {
  # （划重点）将此选项设置为true才能启用本插件！！！
  enabled=false

  # 当此选项设置为true时，本插件将在执行/greload指令时一同重载
  auto-reload=true

  # 当此选项设置为true时，启用redisbungee支持并从redisbungee获取总在线人数
  redis-bungee=false

  # 当此选项设置为true时，插件将在加载的时候闭嘴少说点话
  silent=false

  # 当此选项设置为true时，spigot支持（PlayerBalancerAddon）将能与bc通讯
  # 没装Addon就别开
  plugin-messaging=true

  # 别改，版本号
  version="2.3.4"
}

# 以下为消息提示
# 直接注释掉就可以禁用某条消息
# 支持的变量已显示在默认消息中
# 
# 虽然作者这么说但我还是把变量整理出来了
# {section} 服务器分组
# {alias} 服务器昵称
# {server} 服务器名称
# {from} 来源服务器
# {to} 去向服务器
# {reason} 踢出原因
messages {
  # connecting-server="&a正在连接至 {section} ({alias}) 服务器" # 这条默认禁用，作者想让你看看怎么禁用消息
  connected-server="&a已连接到 {server} (一个 {alias} 服务器)"
  invalid-input="&c指令输入非法！"
  misc-failure="&c找不到能够连接的服务器！"
  player-bypass="&c您没有被移动到其它服务器，因为您拥有playerblancer.bypass权限"
  player-kicked="&c你被从 &a{from} &c中踢出到 &a{to}！\n&c原因: &a{reason}"
  same-section="&c你已经连接到了本分区的服务器啦！"
  unavailable-server="&c本指令无法在当前服务器使用！"
  unknown-section="&a无法找到对应名称的分区！"
}

features {
  balancer {
    # 这里是你可以修改的分区选项！
    # 如果没看懂就尝试进去玩，实际体验一下就知道有啥用了！
    # 你可以设置无限的分区，但是前提是你的硬件过关
    # 如果一个分区没有设置好provider，那就会从父分区继承
    # 当连接到一个分区上的服务器而该分区尚未连接时，您会被分散（这一句这次翻译还是没看懂，原文如下）
    # When connecting to a server on a section while not being on it already, you get distributed
    # 您可以使用正则表达式来匹配一堆服务器，而不是单独添加每个服务器

    # 你可以使用的provider: (PS：可以找作者加更多的provider)
    # NONE:                    无服务器 (没人能连接到这个分区)
    # RANDOM:                  随机传送到该分区内的一个服务器
    # RANDOM_LOWEST:           随机传送到该分区内的人最少的一个服务器
    # RANDOM_FILLER:           随机传送到该分区内的人最多的但没满的一个服务器

    # PROGRESSIVE:             传送到该分区内的第一个没满的服务器（从上到下排列）
    # PROGRESSIVE_LOWEST:      传送到该分区内的人最少的服务器
    # PROGRESSIVE_FILLER:      传送到该分区内的人最多但没满的服务器
    # EXTERNAL:                使用其他插件的provider（这个应该是作者留的接口）
    sections {
      登录服 {
        provider=RANDOM #这里就是随机分配登录服
        servers=[
          "登录1",
          "登录2",
          "登录3"
        ]
      }

      大厅服 {
        parent="登录服" #继承登录服，大厅寄了自动返回登录服 同时继承provider=RANDOM
        alias="大厅服" #服务器别称
        servers=[
          "大厅[1-3]" #此处包含 大厅1 大厅2 大厅3
        ]
      }

      SkyWars大厅服 {
        parent="大厅服" #继承大厅服，SkyWars大厅服寄了自动返回大厅服
        provider=PROGRESSIVE_LOWEST #传到人最少的大厅
        servers=[
          "SkyWars大厅1",
          "SkyWars大厅2",
          "SkyWars大厅3"
        ]
      }

      SkyWars游戏服 {
        parent="SkyWars大厅服" #继承SkyWars大厅服，SkyWars游戏服游戏结束或退出了自动返回SkyWars大厅服
        provider=RANDOM_FILLER #随机且优先进人最多的服务器
        servers=[
          "SkyWars_A[1-5]", 
          "SkyWars_B[1-5]"
          ]
        section-server=playskywars
        section-command { #指令，使用该指令自动进该分区
          name=skywars
          permission="" #所需权限
          aliases=[]
        }
      }
    }

    # 主分区，对于其他功能非常重要
    # 通常将其设置为有主大厅的分区
    principal-section="大厅服"

    # 如果当一个玩家不在任何分区内，该玩家将会被传送到主分区
    # 这个将会影响fallback指令和踢出返回配置
    default-principal=true

    # 虚拟分区可以包含任何在非虚拟分区的服务器
    # 当玩家连接到虚拟分区，啥也不会发生
    dummy-sections=[]

    # 记住玩家之前连接的服务器的分区
    # 当玩家再次连接服务器时，如果在以下配置的分区内，那么玩家将会直接连接至原来的分区，而不是直接回大厅/登录服
    reiterative-sections=[]

    # 如果为true，分区服务器将显示该分区所有服务器上玩家的总数
    # 注意：这将会让某些插件检测到你的玩家比实际的多......
    show-players=true
  }

  # 插件会Ping服务器来检测服务器是否在线
  server-checker {
    #是否开启
    enabled=true

    # 使用CUSTOM或GENERIC方法，CUSTOM通常效果最好
    tactic=CUSTOM

    # 最大尝试次数
    attempts=5

    # 检查周期（毫秒）
    interval=10000

    # 超时时长（毫秒），只在CUSTOM模式生效
    timeout=7000

    # 是否开启debug（开启的话会出一堆信息）
    debug-info=false

    # 如果一个子服的描述符合以下规则，该子服将会被标记为不可用
    # 注意颜色，建议使用下面的“包含”规则或其他规则
    marker-descs=[
      "(?i).*运行中*", # 如果包含这段 （支持正则表达式）
      "游戏进行中" # 完全符合的情况下
    ]
  }

  # 将玩家连接到当前区域的父区域
  fallback-command {
    #是否开启
    enabled=true

    # 留空permission即代表不需要权限
    command {
      name=fallback
      permission="" #权限留空，不需要权限
      aliases=[
        lobby, #指令别名，意思是用这些指令效果一样
        hub,
        back
      ]
    }

    # 不可使用该指令的分区
    excluded-sections=[]

    # 如果为true，玩家将无法连接到主分区的父分区（即登录服）
    restrictive=true

    # 当设置为true时，玩家无法连接至同分区服务器
    # 这不影响指令补全
    # 但这同样影响分区指令
    prevent-same-section=true

    #覆盖规则，替换父分区
    #当你来自指定的分区时，使用该指令会被被传送到另一个指定的分区
    rules {
      来源分区=去向分区
    }
  }

  # 当玩家被踢出时链接到某个分区
  kick-handler {
    #是否开启
    enabled=true

    # 当设置为true时，规则将会以黑名单模式执行，反之则为白名单模式
    # 黑名单模式: 玩家必须以规则之外的reason被踢出，否则将直接被踢出群组
    # 白名单模式: 玩家必须以规则之内的reason被踢出，否则将直接被踢出群组
    inverted=true

    # 玩家被踢出的原因，支持正则表达式
    reasons=[]

    # 如果为true，则在连接到群组时被踢的玩家将被迫重新连接到主体部分
    # 不推荐开启，如果设置了登录服开启可能会导致
    # 在登录服boom的时候，玩家绕过登录服直接进了大厅
    force-principal=false

    # 在此添加您不希望此功能发挥作用的分区（即禁用的分区）
    # 对应分区踢出后会被直接断开连接
    excluded-sections=[]

    # 如果为true，玩家将无法连接到主分区的父分区（即登录服）
    restrictive=true

    # 是否开启debug（开启的话会出一堆信息）
    debug-info=false

    #覆盖规则，替换父分区
    #当你来自指定的分区时，使用该指令会被被传送到另一个指定的分区
    rules {
      来源分区=去向分区
    }
  }

  # 定期添加加载插件之前不存在的服务器
  server-refresh {
    #是否开启
    enabled=false

    # 第一次检测前的间隔（毫秒）
    delay=2000

    # 每次检测之间的间隔（毫秒）
    interval=5000
  }

  #当玩家连接到某个分区时重定向，需要有权限，这对特殊的大厅很有用（比如VIP大厅）
  #如果玩家连接到以前被重定向到的服务器，他们将不会再次被重定向
  permission-router {
    enabled=false

    rules {
      大厅服 {
        "server.vip"=VIP大厅
      }
    }
  }
}
