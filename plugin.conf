# PlayerBalancer 配置文件 (原贴https://www.spigotmc.org/resources/10788/)
# 汉化By 墨守MossCG
# 记得阅读注释，它们是配置中非常重要的一部分
# 如果要获得支持，请向作者发送一条私人消息，其中包含问题描述和配置文件
# 要轻松粘贴配置文件（和其他相关文件），请使用命令/balancer paste
# 如果插件在加载配置时遇到问题，请尝试在文本周围放置引号，也就是""

general {
  # 注意将这个设置成true，在配置好插件之后
  # 是否启用插件
  enabled=false

  # 如果设置成true，插件将在使用/greload的时候一同重载
  auto-reload=true

  # 如果设置成true，插件将以静默方式运行（就是发送更少的信息）
  silent=false

  # 如果设置成true，spigot上的附属将会可以与插件链接
  # 加了spigot附属的话记得设置true！！！
  plugin-messaging=true

  # 版本号，不要修改！
  version="${project.version}"
}

# 消息配置，如果将其注释掉就可以不显示消息
# 支持的变量都写在默认的配置里头了
messages {
  # connecting-server="&a正在连接到 {section} ({alias}) 服务器~" # 这一条消息默认关闭
  connected-server="&a已连接到 {server} (一个 {alias} 服务器)"
  invalid-input="&c你输入的指令似乎不大对哦！"
  misc-failure="&c无法找到一个能进去的服务器！进不去，怎么想都进不去！"
  player-bypass="&c你并没有被传送，因为你有 playerbalancer.bypass 权限！"
  player-kicked="&c你被从 &a{from} &c踢出来啦！所以你传送到了 &a{to}\n&c原因: &a{reason}"
  same-section="&c你已经在这个分区内的一个服务器了！"
  unavailable-server="&c这个服务器上貌似不能用这个指令诶！"
  unknown-section="&a没法找到一个叫这个名字的分区！"
}

features {
  balancer {
    # 这里是你可以修改的分区选项！
    # 如果没看懂就尝试进去玩，实际体验一下就知道有啥用了！
    # 你可以设置无限的分区，但是前提是你的硬件过关
    # 如果一个分区没有设置好provider，那就会从父分区继承
    # 当连接到一个分区上的服务器而该分区尚未连接时，您会被分散（这一句没看懂，原文如下）
	# When connecting to a server on a section while not being on it already, you get distributed
    # 您可以使用正则表达式来匹配一坨服务器，而不是单独添加每个服务器

    # 你可以使用的provider: (PS：可以找作者加更多的provider)
    # NONE:                    无服务器 (没人能连接到这个分区)
    # RANDOM:                  随机传送到该分区内的一个服务器
    # RANDOM_LOWEST:           随机传送到该分区内的人最少的一个服务器
    # RANDOM_FILLER:           随机传送到该分区内的人最多的但没满的一个服务器
    # PROGRESSIVE:             传送到该分区内的第一个没满的服务器（从上到下排列）
    # PROGRESSIVE_LOWEST:      传送到该分区内的人最少的服务器
    # PROGRESSIVE_FILLER:      传送到该分区内的人最多但没满的服务器
    # EXTERNAL:                使用其他插件的provider

    sections {
      登录分区 {
        provider=RANDOM
        servers=[
          "登录1",
          "登录2",
          "登录3"
        ]
      }

      大厅分区 {
        parent="登录分区"
        alias="大厅"
        servers=[
          "大厅[1-3]"
        ]
      }

      空岛战争大厅 {
        parent="大厅分区"
        provider=PROGRESSIVE_LOWEST
        servers=[
          "空岛战争大厅1",
          "空岛战争大厅2",
          "空岛战争大厅3"
        ]
      }

      空岛战争游戏 {
        parent="空岛战争大厅"
        provider=RANDOM_FILLER
        servers=["空岛战争_A[1-5]", "空岛战争_B[1-5]"]
        section-server=playskywars
        section-command {
          name=skywars
          permission=""
          aliases=[]
        }
      }
    }

    # 主分区，对于其他用法会有影响，一般设置为大厅分区
    principal-section="大厅分区"

    # 如果当一个玩家不在任何分区内，该玩家将会被传送到主分区
    # 这个将会影响fallback指令和踢出返回配置
    default-principal=true

    # 虚拟分区可以包含任何在非虚拟分区的服务器
    # 当玩家连接到虚拟分区，啥也不会发生
    dummy-sections=[]

    # 服务器将会记录玩家刚刚连接的服务器
    # 插件会不断地将玩家连接到服务器上
    reiterative-sections=[]

    # 如果为true，分区服务器将显示该分区所有服务器上玩家的总数
    # 注意：这将会让某些插件检测到你的玩家比实际的多......
    show-players=true
  }

  # 插件会Ping服务器来检测服务器是否在线
  server-checker {
    # 是否开启
    enabled=true

    # 使用CUSTOM或GENERIC，第一个通常效果最好
    tactic=CUSTOM

    # 在放弃为玩家获得服务器之前的尝试次数
    attempts=5

    # 每轮检查之间的间隔（毫秒）
    interval=10000

    # 连接超时时间（毫秒），只在CUSTOM模式生效
    timeout=7000

    # 如果设置为true，插件将在检查服务器是否在线的时候显示返回数据
	# 不推荐开启，大量子服会导致刷屏
    debug-info=false

    # 如果一个子服的描述符合以下规则，该子服将会被标记为不可用
    # 注意颜色，建议使用下面的“包含”规则或其他规则
    marker-descs=[
      "(?i).*maintenance*", # 如果包含这段 （支持正则表达式）
      "游戏进行中" # 完全符合的情况下
    ]
  }

  # 将玩家连接到当前区域的父区域
  fallback-command {
    # 是否开启
    enabled=true

    # 留空permission即代表不需要权限
    command {
      name=fallback
      permission=""
      aliases=[
        lobby,
        hub
		#这里你可以无限加指令，但是注意书写格式！
      ]
    }

    # 在此添加您不希望此功能发挥作用的分区（即禁用的分区）
    excluded-sections=[]

    # 如果为true，玩家将无法连接到主分区的父分区
    restrictive=true

    # 当设置成true时，玩家将无法在已在某个分区内服务器的情况下再连接到这个分区
    # 这会影响到指令
    prevent-same-section=true

    #用规则覆盖该行为，覆盖父分区
	#这将设置当你来自指定的分区时被传送到另一个分区
    rules {
      来自分区=去向分区
    }
  }

  # 当玩家被踢出时链接到某个分区
  kick-handler {
    #是否开启
    enabled=true

    # 当设置为true时，规则将会以黑名单模式执行，反之则为白名单模式
    # 黑名单模式: 玩家必须以规则之外的reason被踢出，否则将直接被踢出群组
    # 白名单模式: 玩家必须以规则之内的reason被踢出，否则将直接被踢出群组
    inverted=true

    # 玩家被踢出的原因，支持正则表达式
    reasons=[]

    # 如果为true，则在连接到群组时被踢的玩家将被迫重新连接到主体部分
	# 不推荐开启，如果设置了登录服开启可能会导致
	# 在登录服boom的时候，玩家绕过登录服直接进了大厅
    force-principal=false

    # 在此添加您不希望此功能发挥作用的分区（即禁用的分区）
    excluded-sections=[]

    # 如果为true，玩家将无法连接到主分区的父分区
    restrictive=true

    # 如果设置为true，插件将在玩家被踢出，该功能运行的时候显示返回数据
	# 不推荐开启，大量玩家会导致刷屏
    debug-info=false

    #用规则覆盖该行为，覆盖父分区
	#这将设置当你来自指定的分区时被传送到另一个分区
    rules {
      来自分区=去向分区
    }
  }

  # 定期添加加载插件之前不存在的服务器
  server-refresh {
    # 是否开启
    enabled=false

    # 第一次检测前的间隔（毫秒）
    delay=2000

    # 每次检测之间的间隔（毫秒）
    interval=5000
  }

    #当玩家连接到某个分区时重定向，需要有权限，这对特殊的大厅很有用
    #如果玩家连接到以前被重定向到的服务器，他们将不会再次被重定向
  permission-router {
    # 是否开启
    enabled=false
	
    # 重定向规则
    rules {
      大厅分区 {
        "special.permission"=VIP大厅
      }
    }
  }
}